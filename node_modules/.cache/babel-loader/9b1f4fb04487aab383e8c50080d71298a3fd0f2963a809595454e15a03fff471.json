{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Text = void 0;\nexports.stringToArray = stringToArray;\nconst Util_1 = require(\"../Util\");\nconst Factory_1 = require(\"../Factory\");\nconst Shape_1 = require(\"../Shape\");\nconst Global_1 = require(\"../Global\");\nconst Validators_1 = require(\"../Validators\");\nconst Global_2 = require(\"../Global\");\nfunction stringToArray(string) {\n  return [...string].reduce((acc, char, index, array) => {\n    if (/\\p{Emoji}/u.test(char)) {\n      const nextChar = array[index + 1];\n      if (nextChar && /\\p{Emoji_Modifier}|\\u200D/u.test(nextChar)) {\n        acc.push(char + nextChar);\n        array[index + 1] = '';\n      } else {\n        acc.push(char);\n      }\n    } else if (/\\p{Regional_Indicator}{2}/u.test(char + (array[index + 1] || ''))) {\n      acc.push(char + array[index + 1]);\n    } else if (index > 0 && /\\p{Mn}|\\p{Me}|\\p{Mc}/u.test(char)) {\n      acc[acc.length - 1] += char;\n    } else if (char) {\n      acc.push(char);\n    }\n    return acc;\n  }, []);\n}\nconst AUTO = 'auto',\n  CENTER = 'center',\n  INHERIT = 'inherit',\n  JUSTIFY = 'justify',\n  CHANGE_KONVA = 'Change.konva',\n  CONTEXT_2D = '2d',\n  DASH = '-',\n  LEFT = 'left',\n  TEXT = 'text',\n  TEXT_UPPER = 'Text',\n  TOP = 'top',\n  BOTTOM = 'bottom',\n  MIDDLE = 'middle',\n  NORMAL = 'normal',\n  PX_SPACE = 'px ',\n  SPACE = ' ',\n  RIGHT = 'right',\n  RTL = 'rtl',\n  WORD = 'word',\n  CHAR = 'char',\n  NONE = 'none',\n  ELLIPSIS = 'â€¦',\n  ATTR_CHANGE_LIST = ['direction', 'fontFamily', 'fontSize', 'fontStyle', 'fontVariant', 'padding', 'align', 'verticalAlign', 'lineHeight', 'text', 'width', 'height', 'wrap', 'ellipsis', 'letterSpacing'],\n  attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n  return fontFamily.split(',').map(family => {\n    family = family.trim();\n    const hasSpace = family.indexOf(' ') >= 0;\n    const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n    if (hasSpace && !hasQuotes) {\n      family = `\"${family}\"`;\n    }\n    return family;\n  }).join(', ');\n}\nlet dummyContext;\nfunction getDummyContext() {\n  if (dummyContext) {\n    return dummyContext;\n  }\n  dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);\n  return dummyContext;\n}\nfunction _fillFunc(context) {\n  context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n  context.setAttr('miterLimit', 2);\n  context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n  config = config || {};\n  if (!config.fillLinearGradientColorStops && !config.fillRadialGradientColorStops && !config.fillPatternImage) {\n    config.fill = config.fill || 'black';\n  }\n  return config;\n}\nclass Text extends Shape_1.Shape {\n  constructor(config) {\n    super(checkDefaultFill(config));\n    this._partialTextX = 0;\n    this._partialTextY = 0;\n    for (let n = 0; n < attrChangeListLen; n++) {\n      this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n    }\n    this._setTextData();\n  }\n  _sceneFunc(context) {\n    const textArr = this.textArr,\n      textArrLen = textArr.length;\n    if (!this.text()) {\n      return;\n    }\n    let padding = this.padding(),\n      fontSize = this.fontSize(),\n      lineHeightPx = this.lineHeight() * fontSize,\n      verticalAlign = this.verticalAlign(),\n      direction = this.direction(),\n      alignY = 0,\n      align = this.align(),\n      totalWidth = this.getWidth(),\n      letterSpacing = this.letterSpacing(),\n      fill = this.fill(),\n      textDecoration = this.textDecoration(),\n      shouldUnderline = textDecoration.indexOf('underline') !== -1,\n      shouldLineThrough = textDecoration.indexOf('line-through') !== -1,\n      n;\n    direction = direction === INHERIT ? context.direction : direction;\n    let translateY = lineHeightPx / 2;\n    let baseline = MIDDLE;\n    if (Global_1.Konva._fixTextRendering) {\n      const metrics = this.measureSize('M');\n      baseline = 'alphabetic';\n      translateY = (metrics.fontBoundingBoxAscent - metrics.fontBoundingBoxDescent) / 2 + lineHeightPx / 2;\n    }\n    if (direction === RTL) {\n      context.setAttr('direction', direction);\n    }\n    context.setAttr('font', this._getContextFont());\n    context.setAttr('textBaseline', baseline);\n    context.setAttr('textAlign', LEFT);\n    if (verticalAlign === MIDDLE) {\n      alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n    } else if (verticalAlign === BOTTOM) {\n      alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n    }\n    context.translate(padding, alignY + padding);\n    for (n = 0; n < textArrLen; n++) {\n      let lineTranslateX = 0;\n      let lineTranslateY = 0;\n      const obj = textArr[n],\n        text = obj.text,\n        width = obj.width,\n        lastLine = obj.lastInParagraph;\n      context.save();\n      if (align === RIGHT) {\n        lineTranslateX += totalWidth - width - padding * 2;\n      } else if (align === CENTER) {\n        lineTranslateX += (totalWidth - width - padding * 2) / 2;\n      }\n      if (shouldUnderline) {\n        context.save();\n        context.beginPath();\n        const yOffset = Global_1.Konva._fixTextRendering ? Math.round(fontSize / 4) : Math.round(fontSize / 2);\n        const x = lineTranslateX;\n        const y = translateY + lineTranslateY + yOffset;\n        context.moveTo(x, y);\n        const lineWidth = align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;\n        context.lineTo(x + Math.round(lineWidth), y);\n        context.lineWidth = fontSize / 15;\n        const gradient = this._getLinearGradient();\n        context.strokeStyle = gradient || fill;\n        context.stroke();\n        context.restore();\n      }\n      if (shouldLineThrough) {\n        context.save();\n        context.beginPath();\n        const yOffset = Global_1.Konva._fixTextRendering ? -Math.round(fontSize / 4) : 0;\n        context.moveTo(lineTranslateX, translateY + lineTranslateY + yOffset);\n        const lineWidth = align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;\n        context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + yOffset);\n        context.lineWidth = fontSize / 15;\n        const gradient = this._getLinearGradient();\n        context.strokeStyle = gradient || fill;\n        context.stroke();\n        context.restore();\n      }\n      if (direction !== RTL && (letterSpacing !== 0 || align === JUSTIFY)) {\n        const spacesNumber = text.split(' ').length - 1;\n        const array = stringToArray(text);\n        for (let li = 0; li < array.length; li++) {\n          const letter = array[li];\n          if (letter === ' ' && !lastLine && align === JUSTIFY) {\n            lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n          }\n          this._partialTextX = lineTranslateX;\n          this._partialTextY = translateY + lineTranslateY;\n          this._partialText = letter;\n          context.fillStrokeShape(this);\n          lineTranslateX += this.measureSize(letter).width + letterSpacing;\n        }\n      } else {\n        if (letterSpacing !== 0) {\n          context.setAttr('letterSpacing', `${letterSpacing}px`);\n        }\n        this._partialTextX = lineTranslateX;\n        this._partialTextY = translateY + lineTranslateY;\n        this._partialText = text;\n        context.fillStrokeShape(this);\n      }\n      context.restore();\n      if (textArrLen > 1) {\n        translateY += lineHeightPx;\n      }\n    }\n  }\n  _hitFunc(context) {\n    const width = this.getWidth(),\n      height = this.getHeight();\n    context.beginPath();\n    context.rect(0, 0, width, height);\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n  setText(text) {\n    const str = Util_1.Util._isString(text) ? text : text === null || text === undefined ? '' : text + '';\n    this._setAttr(TEXT, str);\n    return this;\n  }\n  getWidth() {\n    const isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n    return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n  }\n  getHeight() {\n    const isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n    return isAuto ? this.fontSize() * this.textArr.length * this.lineHeight() + this.padding() * 2 : this.attrs.height;\n  }\n  getTextWidth() {\n    return this.textWidth;\n  }\n  getTextHeight() {\n    Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n    return this.textHeight;\n  }\n  measureSize(text) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    let _context = getDummyContext(),\n      fontSize = this.fontSize(),\n      metrics;\n    _context.save();\n    _context.font = this._getContextFont();\n    metrics = _context.measureText(text);\n    _context.restore();\n    const scaleFactor = fontSize / 100;\n    return {\n      actualBoundingBoxAscent: (_a = metrics.actualBoundingBoxAscent) !== null && _a !== void 0 ? _a : 71.58203125 * scaleFactor,\n      actualBoundingBoxDescent: (_b = metrics.actualBoundingBoxDescent) !== null && _b !== void 0 ? _b : 0,\n      actualBoundingBoxLeft: (_c = metrics.actualBoundingBoxLeft) !== null && _c !== void 0 ? _c : -7.421875 * scaleFactor,\n      actualBoundingBoxRight: (_d = metrics.actualBoundingBoxRight) !== null && _d !== void 0 ? _d : 75.732421875 * scaleFactor,\n      alphabeticBaseline: (_e = metrics.alphabeticBaseline) !== null && _e !== void 0 ? _e : 0,\n      emHeightAscent: (_f = metrics.emHeightAscent) !== null && _f !== void 0 ? _f : 100 * scaleFactor,\n      emHeightDescent: (_g = metrics.emHeightDescent) !== null && _g !== void 0 ? _g : -20 * scaleFactor,\n      fontBoundingBoxAscent: (_h = metrics.fontBoundingBoxAscent) !== null && _h !== void 0 ? _h : 91 * scaleFactor,\n      fontBoundingBoxDescent: (_j = metrics.fontBoundingBoxDescent) !== null && _j !== void 0 ? _j : 21 * scaleFactor,\n      hangingBaseline: (_k = metrics.hangingBaseline) !== null && _k !== void 0 ? _k : 72.80000305175781 * scaleFactor,\n      ideographicBaseline: (_l = metrics.ideographicBaseline) !== null && _l !== void 0 ? _l : -21 * scaleFactor,\n      width: metrics.width,\n      height: fontSize\n    };\n  }\n  _getContextFont() {\n    return this.fontStyle() + SPACE + this.fontVariant() + SPACE + (this.fontSize() + PX_SPACE) + normalizeFontFamily(this.fontFamily());\n  }\n  _addTextLine(line) {\n    const align = this.align();\n    if (align === JUSTIFY) {\n      line = line.trim();\n    }\n    const width = this._getTextWidth(line);\n    return this.textArr.push({\n      text: line,\n      width: width,\n      lastInParagraph: false\n    });\n  }\n  _getTextWidth(text) {\n    const letterSpacing = this.letterSpacing();\n    const length = text.length;\n    return getDummyContext().measureText(text).width + letterSpacing * length;\n  }\n  _setTextData() {\n    let lines = this.text().split('\\n'),\n      fontSize = +this.fontSize(),\n      textWidth = 0,\n      lineHeightPx = this.lineHeight() * fontSize,\n      width = this.attrs.width,\n      height = this.attrs.height,\n      fixedWidth = width !== AUTO && width !== undefined,\n      fixedHeight = height !== AUTO && height !== undefined,\n      padding = this.padding(),\n      maxWidth = width - padding * 2,\n      maxHeightPx = height - padding * 2,\n      currentHeightPx = 0,\n      wrap = this.wrap(),\n      shouldWrap = wrap !== NONE,\n      wrapAtWord = wrap !== CHAR && shouldWrap,\n      shouldAddEllipsis = this.ellipsis();\n    this.textArr = [];\n    getDummyContext().font = this._getContextFont();\n    const additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n    for (let i = 0, max = lines.length; i < max; ++i) {\n      let line = lines[i];\n      let lineWidth = this._getTextWidth(line);\n      if (fixedWidth && lineWidth > maxWidth) {\n        while (line.length > 0) {\n          let low = 0,\n            high = stringToArray(line).length,\n            match = '',\n            matchWidth = 0;\n          while (low < high) {\n            const mid = low + high >>> 1,\n              lineArray = stringToArray(line),\n              substr = lineArray.slice(0, mid + 1).join(''),\n              substrWidth = this._getTextWidth(substr);\n            const shouldConsiderEllipsis = shouldAddEllipsis && fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx;\n            const effectiveWidth = shouldConsiderEllipsis ? substrWidth + additionalWidth : substrWidth;\n            if (effectiveWidth <= maxWidth) {\n              low = mid + 1;\n              match = substr;\n              matchWidth = substrWidth;\n            } else {\n              high = mid;\n            }\n          }\n          if (match) {\n            if (wrapAtWord) {\n              const lineArray = stringToArray(line);\n              const matchArray = stringToArray(match);\n              const nextChar = lineArray[matchArray.length];\n              const nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n              let wrapIndex;\n              if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                wrapIndex = matchArray.length;\n              } else {\n                const lastSpaceIndex = matchArray.lastIndexOf(SPACE);\n                const lastDashIndex = matchArray.lastIndexOf(DASH);\n                wrapIndex = Math.max(lastSpaceIndex, lastDashIndex) + 1;\n              }\n              if (wrapIndex > 0) {\n                low = wrapIndex;\n                match = lineArray.slice(0, low).join('');\n                matchWidth = this._getTextWidth(match);\n              }\n            }\n            match = match.trimRight();\n            this._addTextLine(match);\n            textWidth = Math.max(textWidth, matchWidth);\n            currentHeightPx += lineHeightPx;\n            const shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);\n            if (shouldHandleEllipsis) {\n              this._tryToAddEllipsisToLastLine();\n              break;\n            }\n            const lineArray = stringToArray(line);\n            line = lineArray.slice(low).join('').trimLeft();\n            if (line.length > 0) {\n              lineWidth = this._getTextWidth(line);\n              if (lineWidth <= maxWidth) {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n                break;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n      } else {\n        this._addTextLine(line);\n        currentHeightPx += lineHeightPx;\n        textWidth = Math.max(textWidth, lineWidth);\n        if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {\n          this._tryToAddEllipsisToLastLine();\n        }\n      }\n      if (this.textArr[this.textArr.length - 1]) {\n        this.textArr[this.textArr.length - 1].lastInParagraph = true;\n      }\n      if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n        break;\n      }\n    }\n    this.textHeight = fontSize;\n    this.textWidth = textWidth;\n  }\n  _shouldHandleEllipsis(currentHeightPx) {\n    const fontSize = +this.fontSize(),\n      lineHeightPx = this.lineHeight() * fontSize,\n      height = this.attrs.height,\n      fixedHeight = height !== AUTO && height !== undefined,\n      padding = this.padding(),\n      maxHeightPx = height - padding * 2,\n      wrap = this.wrap(),\n      shouldWrap = wrap !== NONE;\n    return !shouldWrap || fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx;\n  }\n  _tryToAddEllipsisToLastLine() {\n    const width = this.attrs.width,\n      fixedWidth = width !== AUTO && width !== undefined,\n      padding = this.padding(),\n      maxWidth = width - padding * 2,\n      shouldAddEllipsis = this.ellipsis();\n    const lastLine = this.textArr[this.textArr.length - 1];\n    if (!lastLine || !shouldAddEllipsis) {\n      return;\n    }\n    if (fixedWidth) {\n      const haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n      if (!haveSpace) {\n        lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n      }\n    }\n    this.textArr.splice(this.textArr.length - 1, 1);\n    this._addTextLine(lastLine.text + ELLIPSIS);\n  }\n  getStrokeScaleEnabled() {\n    return true;\n  }\n  _useBufferCanvas() {\n    const hasLine = this.textDecoration().indexOf('underline') !== -1 || this.textDecoration().indexOf('line-through') !== -1;\n    const hasShadow = this.hasShadow();\n    if (hasLine && hasShadow) {\n      return true;\n    }\n    return super._useBufferCanvas();\n  }\n}\nexports.Text = Text;\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = ['text', 'fontSize', 'padding', 'wrap', 'lineHeight', 'letterSpacing'];\n(0, Global_2._registerNode)(Text);\nFactory_1.Factory.overWriteSetter(Text, 'width', (0, Validators_1.getNumberOrAutoValidator)());\nFactory_1.Factory.overWriteSetter(Text, 'height', (0, Validators_1.getNumberOrAutoValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'direction', INHERIT);\nFactory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(Text, 'fontSize', 12, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'padding', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'align', LEFT);\nFactory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'wrap', WORD);\nFactory_1.Factory.addGetterSetter(Text, 'ellipsis', false, (0, Validators_1.getBooleanValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'text', '', (0, Validators_1.getStringValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'textDecoration', '');","map":{"version":3,"names":["Object","defineProperty","exports","value","Text","stringToArray","Util_1","require","Factory_1","Shape_1","Global_1","Validators_1","Global_2","string","reduce","acc","char","index","array","test","nextChar","push","length","AUTO","CENTER","INHERIT","JUSTIFY","CHANGE_KONVA","CONTEXT_2D","DASH","LEFT","TEXT","TEXT_UPPER","TOP","BOTTOM","MIDDLE","NORMAL","PX_SPACE","SPACE","RIGHT","RTL","WORD","CHAR","NONE","ELLIPSIS","ATTR_CHANGE_LIST","attrChangeListLen","normalizeFontFamily","fontFamily","split","map","family","trim","hasSpace","indexOf","hasQuotes","join","dummyContext","getDummyContext","Util","createCanvasElement","getContext","_fillFunc","context","fillText","_partialText","_partialTextX","_partialTextY","_strokeFunc","setAttr","strokeText","checkDefaultFill","config","fillLinearGradientColorStops","fillRadialGradientColorStops","fillPatternImage","fill","Shape","constructor","n","on","_setTextData","_sceneFunc","textArr","textArrLen","text","padding","fontSize","lineHeightPx","lineHeight","verticalAlign","direction","alignY","align","totalWidth","getWidth","letterSpacing","textDecoration","shouldUnderline","shouldLineThrough","translateY","baseline","Konva","_fixTextRendering","metrics","measureSize","fontBoundingBoxAscent","fontBoundingBoxDescent","_getContextFont","getHeight","translate","lineTranslateX","lineTranslateY","obj","width","lastLine","lastInParagraph","save","beginPath","yOffset","Math","round","x","y","moveTo","lineWidth","lineTo","gradient","_getLinearGradient","strokeStyle","stroke","restore","spacesNumber","li","letter","fillStrokeShape","_hitFunc","height","rect","closePath","setText","str","_isString","undefined","_setAttr","isAuto","attrs","getTextWidth","textWidth","getTextHeight","warn","textHeight","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_context","font","measureText","scaleFactor","actualBoundingBoxAscent","actualBoundingBoxDescent","actualBoundingBoxLeft","actualBoundingBoxRight","alphabeticBaseline","emHeightAscent","emHeightDescent","hangingBaseline","ideographicBaseline","fontStyle","fontVariant","_addTextLine","line","_getTextWidth","lines","fixedWidth","fixedHeight","maxWidth","maxHeightPx","currentHeightPx","wrap","shouldWrap","wrapAtWord","shouldAddEllipsis","ellipsis","additionalWidth","i","max","low","high","match","matchWidth","mid","lineArray","substr","slice","substrWidth","shouldConsiderEllipsis","effectiveWidth","matchArray","nextIsSpaceOrDash","wrapIndex","lastSpaceIndex","lastIndexOf","lastDashIndex","trimRight","shouldHandleEllipsis","_shouldHandleEllipsis","_tryToAddEllipsisToLastLine","trimLeft","haveSpace","splice","getStrokeScaleEnabled","_useBufferCanvas","hasLine","hasShadow","prototype","className","_attrsAffectingSize","_registerNode","Factory","overWriteSetter","getNumberOrAutoValidator","addGetterSetter","getNumberValidator","getBooleanValidator","getStringValidator"],"sources":["C:/Users/tharu/Downloads/mini-layout-editor/mini-layout-editor/node_modules/konva/lib/shapes/Text.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Text = void 0;\nexports.stringToArray = stringToArray;\nconst Util_1 = require(\"../Util\");\nconst Factory_1 = require(\"../Factory\");\nconst Shape_1 = require(\"../Shape\");\nconst Global_1 = require(\"../Global\");\nconst Validators_1 = require(\"../Validators\");\nconst Global_2 = require(\"../Global\");\nfunction stringToArray(string) {\n    return [...string].reduce((acc, char, index, array) => {\n        if (/\\p{Emoji}/u.test(char)) {\n            const nextChar = array[index + 1];\n            if (nextChar && /\\p{Emoji_Modifier}|\\u200D/u.test(nextChar)) {\n                acc.push(char + nextChar);\n                array[index + 1] = '';\n            }\n            else {\n                acc.push(char);\n            }\n        }\n        else if (/\\p{Regional_Indicator}{2}/u.test(char + (array[index + 1] || ''))) {\n            acc.push(char + array[index + 1]);\n        }\n        else if (index > 0 && /\\p{Mn}|\\p{Me}|\\p{Mc}/u.test(char)) {\n            acc[acc.length - 1] += char;\n        }\n        else if (char) {\n            acc.push(char);\n        }\n        return acc;\n    }, []);\n}\nconst AUTO = 'auto', CENTER = 'center', INHERIT = 'inherit', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', RTL = 'rtl', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = 'â€¦', ATTR_CHANGE_LIST = [\n    'direction',\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontVariant',\n    'padding',\n    'align',\n    'verticalAlign',\n    'lineHeight',\n    'text',\n    'width',\n    'height',\n    'wrap',\n    'ellipsis',\n    'letterSpacing',\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n    return fontFamily\n        .split(',')\n        .map((family) => {\n        family = family.trim();\n        const hasSpace = family.indexOf(' ') >= 0;\n        const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n        if (hasSpace && !hasQuotes) {\n            family = `\"${family}\"`;\n        }\n        return family;\n    })\n        .join(', ');\n}\nlet dummyContext;\nfunction getDummyContext() {\n    if (dummyContext) {\n        return dummyContext;\n    }\n    dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);\n    return dummyContext;\n}\nfunction _fillFunc(context) {\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n    context.setAttr('miterLimit', 2);\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n    config = config || {};\n    if (!config.fillLinearGradientColorStops &&\n        !config.fillRadialGradientColorStops &&\n        !config.fillPatternImage) {\n        config.fill = config.fill || 'black';\n    }\n    return config;\n}\nclass Text extends Shape_1.Shape {\n    constructor(config) {\n        super(checkDefaultFill(config));\n        this._partialTextX = 0;\n        this._partialTextY = 0;\n        for (let n = 0; n < attrChangeListLen; n++) {\n            this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n        }\n        this._setTextData();\n    }\n    _sceneFunc(context) {\n        const textArr = this.textArr, textArrLen = textArr.length;\n        if (!this.text()) {\n            return;\n        }\n        let padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), direction = this.direction(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\n        direction = direction === INHERIT ? context.direction : direction;\n        let translateY = lineHeightPx / 2;\n        let baseline = MIDDLE;\n        if (Global_1.Konva._fixTextRendering) {\n            const metrics = this.measureSize('M');\n            baseline = 'alphabetic';\n            translateY =\n                (metrics.fontBoundingBoxAscent - metrics.fontBoundingBoxDescent) / 2 +\n                    lineHeightPx / 2;\n        }\n        if (direction === RTL) {\n            context.setAttr('direction', direction);\n        }\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', baseline);\n        context.setAttr('textAlign', LEFT);\n        if (verticalAlign === MIDDLE) {\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n        }\n        else if (verticalAlign === BOTTOM) {\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n        }\n        context.translate(padding, alignY + padding);\n        for (n = 0; n < textArrLen; n++) {\n            let lineTranslateX = 0;\n            let lineTranslateY = 0;\n            const obj = textArr[n], text = obj.text, width = obj.width, lastLine = obj.lastInParagraph;\n            context.save();\n            if (align === RIGHT) {\n                lineTranslateX += totalWidth - width - padding * 2;\n            }\n            else if (align === CENTER) {\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\n            }\n            if (shouldUnderline) {\n                context.save();\n                context.beginPath();\n                const yOffset = Global_1.Konva._fixTextRendering\n                    ? Math.round(fontSize / 4)\n                    : Math.round(fontSize / 2);\n                const x = lineTranslateX;\n                const y = translateY + lineTranslateY + yOffset;\n                context.moveTo(x, y);\n                const lineWidth = align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;\n                context.lineTo(x + Math.round(lineWidth), y);\n                context.lineWidth = fontSize / 15;\n                const gradient = this._getLinearGradient();\n                context.strokeStyle = gradient || fill;\n                context.stroke();\n                context.restore();\n            }\n            if (shouldLineThrough) {\n                context.save();\n                context.beginPath();\n                const yOffset = Global_1.Konva._fixTextRendering ? -Math.round(fontSize / 4) : 0;\n                context.moveTo(lineTranslateX, translateY + lineTranslateY + yOffset);\n                const lineWidth = align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + yOffset);\n                context.lineWidth = fontSize / 15;\n                const gradient = this._getLinearGradient();\n                context.strokeStyle = gradient || fill;\n                context.stroke();\n                context.restore();\n            }\n            if (direction !== RTL && (letterSpacing !== 0 || align === JUSTIFY)) {\n                const spacesNumber = text.split(' ').length - 1;\n                const array = stringToArray(text);\n                for (let li = 0; li < array.length; li++) {\n                    const letter = array[li];\n                    if (letter === ' ' && !lastLine && align === JUSTIFY) {\n                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n                    }\n                    this._partialTextX = lineTranslateX;\n                    this._partialTextY = translateY + lineTranslateY;\n                    this._partialText = letter;\n                    context.fillStrokeShape(this);\n                    lineTranslateX += this.measureSize(letter).width + letterSpacing;\n                }\n            }\n            else {\n                if (letterSpacing !== 0) {\n                    context.setAttr('letterSpacing', `${letterSpacing}px`);\n                }\n                this._partialTextX = lineTranslateX;\n                this._partialTextY = translateY + lineTranslateY;\n                this._partialText = text;\n                context.fillStrokeShape(this);\n            }\n            context.restore();\n            if (textArrLen > 1) {\n                translateY += lineHeightPx;\n            }\n        }\n    }\n    _hitFunc(context) {\n        const width = this.getWidth(), height = this.getHeight();\n        context.beginPath();\n        context.rect(0, 0, width, height);\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    setText(text) {\n        const str = Util_1.Util._isString(text)\n            ? text\n            : text === null || text === undefined\n                ? ''\n                : text + '';\n        this._setAttr(TEXT, str);\n        return this;\n    }\n    getWidth() {\n        const isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n    }\n    getHeight() {\n        const isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n        return isAuto\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\n                this.padding() * 2\n            : this.attrs.height;\n    }\n    getTextWidth() {\n        return this.textWidth;\n    }\n    getTextHeight() {\n        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    }\n    measureSize(text) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        let _context = getDummyContext(), fontSize = this.fontSize(), metrics;\n        _context.save();\n        _context.font = this._getContextFont();\n        metrics = _context.measureText(text);\n        _context.restore();\n        const scaleFactor = fontSize / 100;\n        return {\n            actualBoundingBoxAscent: (_a = metrics.actualBoundingBoxAscent) !== null && _a !== void 0 ? _a : 71.58203125 * scaleFactor,\n            actualBoundingBoxDescent: (_b = metrics.actualBoundingBoxDescent) !== null && _b !== void 0 ? _b : 0,\n            actualBoundingBoxLeft: (_c = metrics.actualBoundingBoxLeft) !== null && _c !== void 0 ? _c : -7.421875 * scaleFactor,\n            actualBoundingBoxRight: (_d = metrics.actualBoundingBoxRight) !== null && _d !== void 0 ? _d : 75.732421875 * scaleFactor,\n            alphabeticBaseline: (_e = metrics.alphabeticBaseline) !== null && _e !== void 0 ? _e : 0,\n            emHeightAscent: (_f = metrics.emHeightAscent) !== null && _f !== void 0 ? _f : 100 * scaleFactor,\n            emHeightDescent: (_g = metrics.emHeightDescent) !== null && _g !== void 0 ? _g : -20 * scaleFactor,\n            fontBoundingBoxAscent: (_h = metrics.fontBoundingBoxAscent) !== null && _h !== void 0 ? _h : 91 * scaleFactor,\n            fontBoundingBoxDescent: (_j = metrics.fontBoundingBoxDescent) !== null && _j !== void 0 ? _j : 21 * scaleFactor,\n            hangingBaseline: (_k = metrics.hangingBaseline) !== null && _k !== void 0 ? _k : 72.80000305175781 * scaleFactor,\n            ideographicBaseline: (_l = metrics.ideographicBaseline) !== null && _l !== void 0 ? _l : -21 * scaleFactor,\n            width: metrics.width,\n            height: fontSize,\n        };\n    }\n    _getContextFont() {\n        return (this.fontStyle() +\n            SPACE +\n            this.fontVariant() +\n            SPACE +\n            (this.fontSize() + PX_SPACE) +\n            normalizeFontFamily(this.fontFamily()));\n    }\n    _addTextLine(line) {\n        const align = this.align();\n        if (align === JUSTIFY) {\n            line = line.trim();\n        }\n        const width = this._getTextWidth(line);\n        return this.textArr.push({\n            text: line,\n            width: width,\n            lastInParagraph: false,\n        });\n    }\n    _getTextWidth(text) {\n        const letterSpacing = this.letterSpacing();\n        const length = text.length;\n        return getDummyContext().measureText(text).width + letterSpacing * length;\n    }\n    _setTextData() {\n        let lines = this.text().split('\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();\n        this.textArr = [];\n        getDummyContext().font = this._getContextFont();\n        const additionalWidth = shouldAddEllipsis\n            ? this._getTextWidth(ELLIPSIS)\n            : 0;\n        for (let i = 0, max = lines.length; i < max; ++i) {\n            let line = lines[i];\n            let lineWidth = this._getTextWidth(line);\n            if (fixedWidth && lineWidth > maxWidth) {\n                while (line.length > 0) {\n                    let low = 0, high = stringToArray(line).length, match = '', matchWidth = 0;\n                    while (low < high) {\n                        const mid = (low + high) >>> 1, lineArray = stringToArray(line), substr = lineArray.slice(0, mid + 1).join(''), substrWidth = this._getTextWidth(substr);\n                        const shouldConsiderEllipsis = shouldAddEllipsis &&\n                            fixedHeight &&\n                            currentHeightPx + lineHeightPx > maxHeightPx;\n                        const effectiveWidth = shouldConsiderEllipsis\n                            ? substrWidth + additionalWidth\n                            : substrWidth;\n                        if (effectiveWidth <= maxWidth) {\n                            low = mid + 1;\n                            match = substr;\n                            matchWidth = substrWidth;\n                        }\n                        else {\n                            high = mid;\n                        }\n                    }\n                    if (match) {\n                        if (wrapAtWord) {\n                            const lineArray = stringToArray(line);\n                            const matchArray = stringToArray(match);\n                            const nextChar = lineArray[matchArray.length];\n                            const nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n                            let wrapIndex;\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                                wrapIndex = matchArray.length;\n                            }\n                            else {\n                                const lastSpaceIndex = matchArray.lastIndexOf(SPACE);\n                                const lastDashIndex = matchArray.lastIndexOf(DASH);\n                                wrapIndex = Math.max(lastSpaceIndex, lastDashIndex) + 1;\n                            }\n                            if (wrapIndex > 0) {\n                                low = wrapIndex;\n                                match = lineArray.slice(0, low).join('');\n                                matchWidth = this._getTextWidth(match);\n                            }\n                        }\n                        match = match.trimRight();\n                        this._addTextLine(match);\n                        textWidth = Math.max(textWidth, matchWidth);\n                        currentHeightPx += lineHeightPx;\n                        const shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);\n                        if (shouldHandleEllipsis) {\n                            this._tryToAddEllipsisToLastLine();\n                            break;\n                        }\n                        const lineArray = stringToArray(line);\n                        line = lineArray.slice(low).join('').trimLeft();\n                        if (line.length > 0) {\n                            lineWidth = this._getTextWidth(line);\n                            if (lineWidth <= maxWidth) {\n                                this._addTextLine(line);\n                                currentHeightPx += lineHeightPx;\n                                textWidth = Math.max(textWidth, lineWidth);\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            else {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n                if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {\n                    this._tryToAddEllipsisToLastLine();\n                }\n            }\n            if (this.textArr[this.textArr.length - 1]) {\n                this.textArr[this.textArr.length - 1].lastInParagraph = true;\n            }\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n                break;\n            }\n        }\n        this.textHeight = fontSize;\n        this.textWidth = textWidth;\n    }\n    _shouldHandleEllipsis(currentHeightPx) {\n        const fontSize = +this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, height = this.attrs.height, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxHeightPx = height - padding * 2, wrap = this.wrap(), shouldWrap = wrap !== NONE;\n        return (!shouldWrap ||\n            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx));\n    }\n    _tryToAddEllipsisToLastLine() {\n        const width = this.attrs.width, fixedWidth = width !== AUTO && width !== undefined, padding = this.padding(), maxWidth = width - padding * 2, shouldAddEllipsis = this.ellipsis();\n        const lastLine = this.textArr[this.textArr.length - 1];\n        if (!lastLine || !shouldAddEllipsis) {\n            return;\n        }\n        if (fixedWidth) {\n            const haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n            if (!haveSpace) {\n                lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n            }\n        }\n        this.textArr.splice(this.textArr.length - 1, 1);\n        this._addTextLine(lastLine.text + ELLIPSIS);\n    }\n    getStrokeScaleEnabled() {\n        return true;\n    }\n    _useBufferCanvas() {\n        const hasLine = this.textDecoration().indexOf('underline') !== -1 ||\n            this.textDecoration().indexOf('line-through') !== -1;\n        const hasShadow = this.hasShadow();\n        if (hasLine && hasShadow) {\n            return true;\n        }\n        return super._useBufferCanvas();\n    }\n}\nexports.Text = Text;\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = [\n    'text',\n    'fontSize',\n    'padding',\n    'wrap',\n    'lineHeight',\n    'letterSpacing',\n];\n(0, Global_2._registerNode)(Text);\nFactory_1.Factory.overWriteSetter(Text, 'width', (0, Validators_1.getNumberOrAutoValidator)());\nFactory_1.Factory.overWriteSetter(Text, 'height', (0, Validators_1.getNumberOrAutoValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'direction', INHERIT);\nFactory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(Text, 'fontSize', 12, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'padding', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'align', LEFT);\nFactory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'wrap', WORD);\nFactory_1.Factory.addGetterSetter(Text, 'ellipsis', false, (0, Validators_1.getBooleanValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'text', '', (0, Validators_1.getStringValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'textDecoration', '');\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}